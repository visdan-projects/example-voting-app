pipeline {
    
    agent none
    
    stages {
        stage('build') {
        	agent {
        		docker {
            		image 'python:2.7.16-slim'
            		args '--user root'
        		}
    		}
    
        	when {
        	    changeset "**/vote/**"
        	}
        	
            steps {
                echo 'Compiling vote app'
                dir('vote') {
                    sh 'pip install -r requirements.txt' 
                }
            }
        }
        
        stage('test') {
        	agent {
        		docker {
            		image 'python:2.7.16-slim'
            		args '--user root'
        		}
    		}
    		
        	when {
        	    changeset "**/vote/**"
        	}
        	
            steps {
                echo 'Running Unit Tests on vote App'
                dir('vote') {
                	sh 'pip install -r requirements.txt'
                    sh 'nosetests -v'   
                }
            }
        }
        
        stage('docker-package') {
        	agent any
        	
        	when {
        		branch 'master'
        	    changeset "**/vote/**"
        	}

            steps {
                echo 'Packaging vote app with Docker'
				script {
				    docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {

        				def workerImage = docker.build("visdan/vote:v${env.BUILD_ID}", "./vote")

        				/* Push the container to the custom Registry */
        				workerImage.push()
        				workerImage.push("${env.BRANCH_NAME}")
    				}
				    
				}

            }
        }
    }
    
    post {
        always {
            echo 'Pipeline for vote is complete...'
        }
        failure {
            slackSend (channel: "instavote-cd", message: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
        success {
			slackSend (channel: "instavote-cd", message: "Build Succeeded - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
    }
}